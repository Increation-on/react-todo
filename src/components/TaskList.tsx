/**
 * –ö–û–ú–ü–û–ù–ï–ù–¢: TaskList (–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á)
 * –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å: —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á
 * –ü–∞—Ç—Ç–µ—Ä–Ω: Container Component / State Manager
 */

import Task from "./Task.tsx"
import AddTask from "./AddTask.tsx"
import { useTasksAPI } from '../hooks/useTasksAPI.tsx'
import { useTaskStorage } from '../hooks/useTaskStorage-deleteLater.jsx'
// import { useTaskReducer } from '../hooks/useTaskReducer.jsx'
import { useCallback } from "react"
import { useTaskStore } from "../store/TaskStore.tsx"

const TaskList = () => {
    // üéØ –ü–ê–¢–¢–ï–†–ù: State Management
    // const { state, dispatch } = useTaskReducer()

// ‚úÖ ZUSTAND: –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –º–µ—Ç–æ–¥—ã –∏–∑ store
    const tasks = useTaskStore(state => state.tasks)
    const addTask = useTaskStore(state => state.addTask)
    const toggleTask = useTaskStore(state => state.toggleTask)
    const deleteTask = useTaskStore(state => state.deleteTask)

    // ‚úÖ HOOK: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å localStorage (–∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–∑–∞–≥—Ä—É–∑–∫–∞)
    // useTaskStorage(state.tasks, dispatch)

    // ‚úÖ HOOK: –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API
    const { loadTasksFromAPI, isLoading } = useTasksAPI(tasks)

    const handleLoadFromAPI = async () => {
    try {
        const tasksToAdd = await loadTasksFromAPI()
        tasksToAdd.forEach(task => {
            addTask(task.text)
        })
    } catch (error) {
        console.error('Failed to load tasks:', error)
    }
}

    const handleToggle = useCallback((id: number | string) => {
       toggleTask(id)
    }, [toggleTask]);

    const handleDelete = useCallback((id: number | string) => {
        deleteTask(id)
    }, [deleteTask]);

    return (
        <div className="task-list">
            <h2>Tasks List</h2>
            {/* üéØ –ö–û–ú–ü–û–ù–ï–ù–¢: –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ API —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º loading */}
            <button onClick={handleLoadFromAPI} disabled={isLoading}>
                {isLoading ? 'Loading...' : 'Load Tasks from API'}
            </button>

            {/* ‚úÖ –ö–û–ú–ü–û–ù–ï–ù–¢: –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á */}
            <AddTask onAddTask={addTask} />

            {/* üîÑ –ü–ê–¢–¢–ï–†–ù: –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á */}
            <ul>
                {tasks.map(task => (
                    // ‚úÖ –ö–û–ú–ü–û–ù–ï–ù–¢: –û—Ç–¥–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å callback —Ñ—É–Ω–∫—Ü–∏—è–º–∏
                    <Task
                        key={task.id}          // ‚ö° React key –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–æ–≤
                        task={task}            // üì¶ –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–æ–±—ä–µ–∫—Ç)
                        onToggle={handleToggle}      // ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º —Ñ—É–Ω–∫—Ü–∏—é, –∞ –Ω–µ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
                        onDelete={handleDelete}      // ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º —Ñ—É–Ω–∫—Ü–∏—é, –∞ –Ω–µ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
                      
                    />
                ))}
            </ul>
        </div>
    )
}

export default TaskList